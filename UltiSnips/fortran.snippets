global !p
def check_key(rx, dic, groupnum = 1, charnum = 6): # Check if the string match the rx expression; if match, check if the string is the key of the dic. Here suppose the length of the pattern is less than 4.
	string = vim.eval(r"strpart(getline('.'), 0, col('.') - 1)") # get the string from the head of the line to the position of the cursor
	length = len(string)
	if length >= charnum:
		string = string[-charnum:]
	match = re.search(rx + r'$', string)
	if match:
		return match.group(groupnum) in dic
	else:
		return 0

dic_define_var = {
	r'r' : r'real(8)',
	r'i' : r'integer',
}

endglobal

# i: if
snippet if "if structure" i
if (${1:condition}) then
	$2
end if
endsnippet

snippet ife "else if" i
else if (${1:condition}) then
	$2
endsnippet

# f: function
snippet f "function" 
function ${1:name}(${2:var}) result(${3:output})
	implicit none
	$4
end function
endsnippet

# l: loop
snippet ld "loop (do)" i
do ${1:var} = ${2:lim1}, ${3:lim2}
	$4
end do
endsnippet

snippet lw "loop (while)" i
do while (${1:condition})
	$2
end do
endsnippet

# m: module
snippet m "module" i
module ${1:name}
	$2
end module
endsnippet

# o: open and close
snippet o "open and close file" i
open(unit = $1, file = "$2")
	$3
close(${4:$1})
endsnippet

# p: program
snippet p "program" i
program main
	implicit none
	$1

end program
endsnippet

# s: segment, subroutine
snippet s "weak seg" i
! -------------------------$1-------------------------
endsnippet

snippet S "strong seg" i
! =========================$1=========================
endsnippet

snippet sr "subroutine" i
subroutine ${1:name}(${2:var})
	$3
end subroutine
endsnippet

# v: variable define
snippet v "variable" i
${1:type} :: ${2:var}
endsnippet

snippet "v([a-z]{1,3})" "check_key(r'v([a-z]{1,3})', dic_define_var)" ire
`!p snip.rv = dic_define_var[match.group(1)]` :: $1
endsnippet

# w: write
snippet w "print (standard output)"
write(*, ${1:*}) ${2:var_name}
endsnippet

